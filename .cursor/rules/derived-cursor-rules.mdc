---
description: AI rules derived by SpecStory from the project AI interaction history
globs: *
---

## PROJECT GOALS

*   Create a .NET library for managing keybindings.
*   Support profiles where a command is the key.
*   Allow each profile to have a keybinding associated with a command.
*   Implement a contracts, models, services architecture.
*   Adhere to SOLID and DRY principles.

## TECH STACK

*   .NET
*   CommandLineParser (to be used in the console app demo)

## PROJECT STRUCTURE

*   Contracts: Defines interfaces for services and data models.
*   Models: Defines the data structures used in the library.
*   Services: Implements the business logic for managing keybindings.

## CODING STANDARDS

*   Adhere to SOLID principles (Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion).
*   Follow DRY principle (Don't Repeat Yourself).
*   When catching exceptions, catch specific exception types rather than generic exceptions to adhere to code analysis rule CA1031.
*   The `Key` property of the `KeyCombination` class is stored in uppercase.
*   The `ToString()` method should format special keys properly, preserving the correct casing for display.
*   Use enums, `nameof`, and consts where possible to reduce hard-coded strings.

## WORKFLOW & RELEASE RULES

*   The Keybinding.ConsoleApp should serve as a demo of the library's functionality and utilize the CommandLineParser library.
*   Always run `dotnet format && dotnet test` before committing changes.

## PROJECT DOCUMENTATION & CONTEXT SYSTEM

## DEBUGGING

*   When debugging `ToString` related issues, note that the `KeyCombination` constructor stores keys in uppercase internally. The `ToString()` method formats special keys with proper casing for display.